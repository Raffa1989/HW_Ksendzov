Для выполнения задания у вас должен быть установлен для Windows - GitBash.
Создан аккаунт в GitHub

Все шаги сценария выполняйте в терминале GitBush, Terminal, в папке под гитом.

Как отправить ДЗ на проверку.
 1. Создайте текстовый файл как в первом ДЗ по Terminal.
 2. Сценарий перенесите в этот файл.
 3. На против каждого действия - напишите команду в GitBash

Файл со сценарием и ссылку на свой гит хаб отправляйте менторам на проверку.
 
JSON
 4. Создать внешний репозиторий c названием JSON. 
 ---> В GitHub кликаю справа на кнопку New --> в Repository name прописываю JSON --> 
 оставляю репозиторий публичным --> ставлю галочку рядом с Add a README file (чтоб репозиторий был непустой) --> Кликаю внизу на кнопку Creat repository
 5. Клонировать репозиторий JSON на локальный компьютер. 
 ---> git clone ссылка на репозиторий (в необходимом репозитории кликнуть справа на кнопку Code и скопировать HTTPS)
 6. Внутри локального JSON создать файл “new.json”. 
 ---> touch new.json
 7. Добавить файл под гит. 
 ---> git add new.json
 8. Закоммитить файл. 
 ---> git commit -m "the first file"
 9. Отправить файл на внешний GitHub репозиторий. 
 ---> git push
 10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, 
 будущая желаемая зарплата). Всё написать в формате JSON. 
 ---> vim new.json (режим редактирования (I) - прописываю 
 {
  "name": "Koneva Tatiana",
  "age": 33,
  "animals": "One cat",
  "salary": "150000 rur"
 }
 Жму ESC - :wq)
 11. Отправить изменения на внешний репозиторий. 
 ---> git add new.json --> git commit -m "anketa" --> git push
 12. Создать файл preferences.json 
 ---> touch preferences.json 
 13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, 
 страна которую хотели бы посетить) в формате JSON. 
 ---> vim preferences.json (режим редактирования (I) - прописываю
 {
   "movie":"1+1",
   "show":"Клиника",
   "food":"Хинкали",
   "season":"Зима",
   "country":"Япония"
 }
 Жму ESC - :wq)
 14. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON 
 ---> touch sklls.json --> vim skills.json --> (режим редактирования (I) - прописываю 
 {
   "skills": "Terminal, Git, Testing"
 }
 Жму ESC - :wq)
 15. Отправить сразу 2 файла на внешний репозиторий.
 ---> git add . --> git commit -m "first json_1" --> git push
 16. На веб интерфейсе создать файл bug_report.json.
 --->  в репозитории JSON кликаю справа на кнопку ADD FILE --> creat new file --> в NAME YOUR FILE прописываю bug_report.json --> кликаю внизу на кнопку
 Commit new file
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе. 
 ---> какие изменения? они только в 18 пункте
 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON. 
 ---> в репозитории JSON находим нужный файл и кликаем по его названию --> справа кликаем на значок карандаша (редактирование) --> прописываем
 {
  "bag": "моя фантазия не придумала баг"
}
 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 ---> кликаю внизу на кнопку Commit changes (сохранить)
 20. Синхронизировать внешний и локальный репозиторий JSON
 ---> git pull (в терминале)

XML
 21. Создать внешний репозиторий c названием XML.
 ---> В GitHub кликаю справа на кнопку New --> в Repository name прописываю XML -->
 оставляю репозиторий публичным --> ставлю галочку рядом с Add a README file (чтоб репозиторий был непустой) --> Кликаю внизу на кнопку Creat repository
 22. Клонировать репозиторий XML на локальный компьютер.
 ---> git clone ссылка на репозиторий (в необходимом репозитории кликнуть справа на кнопку Code и скопировать HTTPS)
 23. Внутри локального XML создать файл “new.xml”. 
 ---> touch new.xml
 24. Добавить файл под гит.
 ---> git add new.xml
 25. Закоммитить файл.
 ---> git commit -m "first xml"
 26. Отправить файл на внешний GitHub репозиторий.
 ---> git push
 27. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, 
 будущая желаемая зарплата). Всё написать в формате XML.
 ---> vim new.xml (режим редактирования (I) - прописываю 
 <Person>
     <Name>Tatiana</Name>
     <Surname>Koneva</Surname>
     <Age>33</Age>
     <Pets>
         <Pet>Cat</Pet>
     </Pets>
     <Salary>150000RUR</Salary>
 </Person>    
 Жму ESC - :wq)
 28. Отправить изменения на внешний репозиторий.
 ---> git add new.xml --> git commit -m "first xml_1" --> git push
 29. Создать файл preferences.xml
 ---> touch preferences.xml
 30. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, 
 страна которую хотели бы посетить) в формате XML.
 ---> vim preferences.xml (режим редактирования (I) - прописываю 
 <FORM>
    <Film>1+1</Film>
    <Series>Scrubs</Series>
    <Food>Khinkali</Food>
    <Season>Winter</Season>
    <Country>Japan</Country>
 </FORM>   
 Жму ESC - :wq)
 31. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML
 ---> touch sklls.xml --> vim skills.xml --> (режим редактирования (I) - прописываю 
 <Courses>
	<Skills>
		<Skill>GIT</Skill>
		<Skill>Terminal</Skill>
		<Skill>Testing</Skill>
	</Skills>
 </Courses>
 Жму ESC - :wq)
 32. Сделать коммит в одну строку.
 ---> git add . --> git commit -m "first xml_1"
 33. Отправить сразу 2 файла на внешний репозиторий.
 ---> git push
 34. На веб интерфейсе создать файл bug_report.xml.
 --->  в репозитории XML кликаю справа на кнопку ADD FILE --> creat new file --> в NAME YOUR FILE прописываю bug_report.xml --> кликаю внизу на кнопку
 Commit new file
 35. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 ---> какие изменения? они только в 36 пункте
 36. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.
 ---> в репозитории XML находим нужный файл и кликаем по его названию --> справа кликаем на значок карандаша (редактирование) --> прописываем
 <XML>
    <Bugs>My whole life is a bag</Bug>
    </Bugs>
 </XML>
 37. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 ---> кликаю внизу на кнопку Commit changes (сохранить)
 38. Синхронизировать внешний и локальный репозиторий XML
 ---> git pull (в терминале)
 
 TXT
 1. Создать внешний репозиторий c названием TXT.
 ---> В GitHub кликаю справа на кнопку New --> в Repository name прописываю TXT -->
 оставляю репозиторий публичным --> ставлю галочку рядом с Add a README file (чтоб репозиторий был непустой) --> Кликаю внизу на кнопку Creat repository
 2. Клонировать репозиторий TXT на локальный компьютер.
 ---> git clone ссылка на репозиторий (в необходимом репозитории кликнуть справа на кнопку Code и скопировать HTTPS)
 3. Внутри локального TXT создать файл “new.txt”.
 ---> touch new.txt
 4. Добавить файл под гит.
 ---> git add new.txt
 5. Закоммитить файл.
 ---> git commit -m "first txt"
 6. Отправить файл на внешний GitHub репозиторий.
 ---> git push
 7. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, 
 будущая желаемая зарплата). Всё написать в формате TXT.
 ---> vim new.txt (режим редактирования (I) - прописываю 
 Name: Koneva Tatiana
 Age: 33
 Pets: one cat
 Salary: 150000 RUR  
 Жму ESC - :wq)
 8. Отправить изменения на внешний репозиторий.
 ---> git add new.txt --> git commit -m "anketa" --> git push
 9. Создать файл preferences.txt
 ---> touch preferences.txt
 10. В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, 
 страна которую хотели бы посетить) в формате TXT.
 ---> vim preferences.txt (режим редактирования (I) - прописываю 
 Film: 1+1
 Serials: Scrubs
 Food: khinkali
 Season: winter
 Country: Japan 
 Жму ESC - :wq)
 11. Создать файл sklls.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT
 ---> touch sklls.txt --> vim skills.txt --> (режим редактирования (I) - прописываю 
  Skills:
GIT
Terminal
Testing
 Жму ESC - :wq)
 12. Сделать коммит в одну строку.
 ---> git add . --> git commit -m "form_2"
 13. Отправить сразу 2 файла на внешний репозиторий.
 ---> git push
 14. На веб интерфейсе создать файл bug_report.txt.
 --->  в репозитории TXT кликаю справа на кнопку ADD FILE --> creat new file --> в NAME YOUR FILE прописываю bug_report.txt --> кликаю внизу на кнопку
 Commit new file
 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 ---> какие изменения? они только в 36 пункте
 16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.
 ---> в репозитории TXT находим нужный файл и кликаем по его названию --> справа кликаем на значок карандаша (редактирование) --> прописываем
 some kind of bug
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 ---> кликаю внизу на кнопку Commit changes (сохранить
 18. Синхронизировать внешний и локальный репозиторий TXT
 ---> git pull (в терминале)
